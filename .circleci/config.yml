version: 2.1

# The following stanza defines a map named defaults with a variable that may be
# inserted using the YAML merge (<<: *) key later in the file to save some
# typing. See http://yaml.org/type/merge.html for details.
env: &env
  environment:
    CI_SCRIPTS: "npx --quiet --package @reactioncommerce/ci-scripts@1.6.2"
    DOCKER_REPOSITORY: "gcr.io/appliance-shack-cluster2"
    DOCKER_NAME: "reaction-admin"

defaults: &build
  <<: *env
  docker:
    - image: cimg/node:14.21.3

jobs:
  install-dependencies:
    <<: *env
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-admin-v3-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - reaction-admin-v3-node-modules-{{ .Branch }}
      - run:
          name: Install the same NPM version that Meteor uses
          command: sudo npm i -g npm@6.14.18
      - run:
          name: Install NPM dependencies
          command: npm -v && npm ci
      - save_cache:
          key: reaction-admin-v3-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - save_cache:
          key: reaction-admin-v3-node-modules-{{ .Branch }}
          paths:
            - node_modules

  dockerfile-lint:
    <<: *env
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Lint Dockerfiles
          command: ${CI_SCRIPTS} lint-dockerfiles

  eslint:
    <<: *env
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-admin-v3-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - reaction-admin-v3-node-modules-{{ .Branch }}
      - run:
          name: Lint JavaScript
          command: npm run lint

  test-unit:
    <<: *env
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-admin-v3-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - reaction-admin-v3-node-modules-{{ .Branch }}
      - run:
          name: Run Unit Tests
          command: npm run test:unit
  release:
    <<: *env
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-admin-v3-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - reaction-admin-v3-node-modules-{{ .Branch }}
      - run:
          name: Push the latest version to npm
          command: npx semantic-release

  docker-build-push:
    <<: *env
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Login to gcr.io docker registry
          command: echo ${GCR_JSON_KEY} | docker login -u _json_key --password-stdin https://gcr.io
      - run:
          name: Build and push production Docker image
          command: |
            VERSION=$(git describe --tags `git rev-list --tags --max-count=1` | cut -c2-100)
            DOCKER_IMAGE_URI="$DOCKER_REPOSITORY/$DOCKER_NAME"
            DOCKER_IMAGE_URI_VERSIONED="$DOCKER_IMAGE_URI:$VERSION"
            docker build -t $DOCKER_IMAGE_URI_VERSIONED -t $DOCKER_IMAGE_URI:latest .
            docker push $DOCKER_IMAGE_URI_VERSIONED
            docker push $DOCKER_IMAGE_URI:latest

workflows:
  version: 2
  build_and_test:
    jobs:
      - install-dependencies
      - dockerfile-lint:
          requires:
            - install-dependencies
      - eslint:
          requires:
            - install-dependencies
      - test-unit:
          requires:
            - install-dependencies
      - release:
          context: reaction-publish-semantic-release
          filters:
            branches:
              only:
                - trunk
          requires:
            - dockerfile-lint
            - eslint
            - test-unit
      - docker-build-push:
          context: reaction-publish-docker
          filters:
            branches:
              only:
                - trunk
          requires:
            - release
